import { ApolloError } from '@apollo/client/core';
const isApolloError = (err) => err && err.hasOwnProperty('graphQLErrors');
export class TestOperation {
    operation;
    observer;
    constructor(operation, observer) {
        this.operation = operation;
        this.observer = observer;
    }
    flush(result) {
        if (isApolloError(result)) {
            this.observer.error(result);
        }
        else {
            const fetchResult = result ? { ...result } : result;
            this.observer.next(fetchResult);
            this.observer.complete();
        }
    }
    flushData(data) {
        this.flush({
            data,
        });
    }
    networkError(error) {
        const apolloError = new ApolloError({
            networkError: error,
        });
        this.flush(apolloError);
    }
    graphqlErrors(errors) {
        this.flush({
            errors,
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlcmF0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vdGVzdGluZy9zcmMvb3BlcmF0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxXQUFXLEVBQTJDLE1BQU0scUJBQXFCLENBQUM7QUFFM0YsTUFBTSxhQUFhLEdBQUcsQ0FBQyxHQUFRLEVBQXNCLEVBQUUsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQztBQU1uRyxNQUFNLE9BQU8sYUFBYTtJQUVOO0lBQ0M7SUFGbkIsWUFDa0IsU0FBb0IsRUFDbkIsUUFBa0M7UUFEbkMsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUNuQixhQUFRLEdBQVIsUUFBUSxDQUEwQjtJQUNsRCxDQUFDO0lBRUcsS0FBSyxDQUFDLE1BQXFDO1FBQ2hELElBQUksYUFBYSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3pCLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzdCO2FBQU07WUFDTCxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1lBQ3BELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQWtCLENBQUMsQ0FBQztZQUN2QyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQzFCO0lBQ0gsQ0FBQztJQUVNLFNBQVMsQ0FBQyxJQUFtQztRQUNsRCxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQ1QsSUFBSTtTQUNMLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSxZQUFZLENBQUMsS0FBWTtRQUM5QixNQUFNLFdBQVcsR0FBRyxJQUFJLFdBQVcsQ0FBQztZQUNsQyxZQUFZLEVBQUUsS0FBSztTQUNwQixDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFTSxhQUFhLENBQUMsTUFBc0I7UUFDekMsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUNULE1BQU07U0FDUCxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeGVjdXRpb25SZXN1bHQsIEdyYXBoUUxFcnJvciB9IGZyb20gJ2dyYXBocWwnO1xuaW1wb3J0IHsgT2JzZXJ2ZXIgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEFwb2xsb0Vycm9yLCBGZXRjaFJlc3VsdCwgT3BlcmF0aW9uIGFzIExpbmtPcGVyYXRpb24gfSBmcm9tICdAYXBvbGxvL2NsaWVudC9jb3JlJztcblxuY29uc3QgaXNBcG9sbG9FcnJvciA9IChlcnI6IGFueSk6IGVyciBpcyBBcG9sbG9FcnJvciA9PiBlcnIgJiYgZXJyLmhhc093blByb3BlcnR5KCdncmFwaFFMRXJyb3JzJyk7XG5cbmV4cG9ydCB0eXBlIE9wZXJhdGlvbiA9IExpbmtPcGVyYXRpb24gJiB7XG4gIGNsaWVudE5hbWU6IHN0cmluZztcbn07XG5cbmV4cG9ydCBjbGFzcyBUZXN0T3BlcmF0aW9uPFQgPSB7IFtrZXk6IHN0cmluZ106IGFueSB9PiB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyByZWFkb25seSBvcGVyYXRpb246IE9wZXJhdGlvbixcbiAgICBwcml2YXRlIHJlYWRvbmx5IG9ic2VydmVyOiBPYnNlcnZlcjxGZXRjaFJlc3VsdDxUPj4sXG4gICkge31cblxuICBwdWJsaWMgZmx1c2gocmVzdWx0OiBFeGVjdXRpb25SZXN1bHQgfCBBcG9sbG9FcnJvcik6IHZvaWQge1xuICAgIGlmIChpc0Fwb2xsb0Vycm9yKHJlc3VsdCkpIHtcbiAgICAgIHRoaXMub2JzZXJ2ZXIuZXJyb3IocmVzdWx0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZmV0Y2hSZXN1bHQgPSByZXN1bHQgPyB7IC4uLnJlc3VsdCB9IDogcmVzdWx0O1xuICAgICAgdGhpcy5vYnNlcnZlci5uZXh0KGZldGNoUmVzdWx0IGFzIGFueSk7XG4gICAgICB0aGlzLm9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGZsdXNoRGF0YShkYXRhOiB7IFtrZXk6IHN0cmluZ106IGFueSB9IHwgbnVsbCk6IHZvaWQge1xuICAgIHRoaXMuZmx1c2goe1xuICAgICAgZGF0YSxcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBuZXR3b3JrRXJyb3IoZXJyb3I6IEVycm9yKTogdm9pZCB7XG4gICAgY29uc3QgYXBvbGxvRXJyb3IgPSBuZXcgQXBvbGxvRXJyb3Ioe1xuICAgICAgbmV0d29ya0Vycm9yOiBlcnJvcixcbiAgICB9KTtcblxuICAgIHRoaXMuZmx1c2goYXBvbGxvRXJyb3IpO1xuICB9XG5cbiAgcHVibGljIGdyYXBocWxFcnJvcnMoZXJyb3JzOiBHcmFwaFFMRXJyb3JbXSk6IHZvaWQge1xuICAgIHRoaXMuZmx1c2goe1xuICAgICAgZXJyb3JzLFxuICAgIH0pO1xuICB9XG59XG4iXX0=